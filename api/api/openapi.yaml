openapi: 3.0.3
info:
  description: Rest API resources of the EMnify System.
  title: EMnify Rest API
  version: "1.3"
servers:
- description: EMnify API
  url: https://cdn.emnify.net
security:
- bearerAuth: []
tags:
- name: Authentication
- name: Endpoint
paths:
  /api/v1/authenticate:
    post:
      description: |
        This entrypoint returns a JWT `auth_token` for authenticating further requests to the API.
      operationId: Authenticate
      requestBody:
        $ref: '#/components/requestBodies/Authentication'
        content:
          application/json:
            examples:
              Application_Authentication:
                summary: Application Token Authentication
                value:
                  application_token: 5cCI6IkpXVCJ9..
              User_Authentication:
                summary: User/Password Authentication
                value:
                  username: user@service.org
                  password: 8Y8knYSkeyYV23kd
              Refresh_Authentication:
                description: |
                  When a user logs in with username/password credentials, they receive a `refresh_token` in the response. It is possible to refresh an expired `auth_token` by sending this `refresh_token`.
                summary: Refresh Authentication
                value:
                  refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              Verify_MFA_Code:
                description: |
                  When a user logs in with their user/password credentials and MFA is enabled, this entrypoint returns an `mfa_token` instead of an `auth_token` and `refresh_token`.
                  In this example, the user sends the `mfa_token` and the one-time password back to the server with a device fingerprint in order to save a trusted device.
                  Subsequent user/password logins with a valid device fingerprint will skip the one-time password challenge.
                summary: MFA Code Verification
                value:
                  mfa_token: zI1NiIsInR5cCI6IkpXV...
                  code: "123456"
                  fingerprint: zI1NiIsInR5cCI6IkpXV...
              User_Auth_with_MFA_Fingerprint:
                description: |
                  The fingerprint sent with this call should match the fingerprint of an already-trusted device.
                  Trusted device fingerprints are added to the user account when verifying the one-time password during MFA authentication (seen in the 'MFA Code Verification' example).
                summary: User/Password Auth with Device Fingerprint
                value:
                  username: user@service.org
                  password: 8Y8knYSkeyYV23kd
                  fingerprint: zI1NiIsInR5cCI6IkpXV
            schema:
              example:
                refresh_token: refresh_token
                password: password
                application_token: application_token
                username: username
              properties:
                application_token:
                  type: string
                username:
                  type: string
                password:
                  format: password
                  type: string
                refresh_token:
                  format: string
                  type: string
              title: Authentication
              type: object
        description: Authentication using Application Tokens or user/password combination
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                User_Authentication:
                  description: |
                    An `auth_token` and a `refresh_token` are returned.
                    When the auth token expires ({{site.brand.auth_token_validity}}), the refresh token may be sent to this entrypoint
                    to retrieve a new auth token.
                  summary: User/Password Authentication Success
                  value:
                    auth_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                Application_Authentication:
                  description: The successful response for Application Tokens returns
                    an `auth_token` only.
                  summary: App Token Authentication Success
                  value:
                    auth_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                User_Authentication_with_MFA_enabled:
                  description: If a user authenticates with MFA enabled and no trusted
                    device.
                  summary: User Authentication with MFA enabled
                  value:
                    mfa_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
          description: Successful Authentication Request
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
          description: Unexpected error in API call. See HTTP response body for details.
      security: []
      summary: Retrieve Authentication Token
      tags:
      - Authentication
      x-contentType: application/json
      x-accepts: application/json
  /api/v1/endpoint:
    get:
      description: Returns the list of endpoints, filtered, sorted and paged according
        to query parameters.
      operationId: GetEndpoints
      parameters:
      - description: |
          Filter parameter in `<filter>:<value>` format. Expects comma separated list of filtering criteria out of the following fields:

          * `status`
          * `service_profile`
          * `tariff_profile`
          * `last_updated`
          * `created`
          * `name`
          * `tags`
          * `ip_address`
          * `imei`
        examples:
          nofiltering:
            summary: No filter applied
            value: ""
          filterbytag:
            summary: Filter by 'Monitoring' tag
            value: tags:arduino
          multiplefilters:
            summary: Filter by Status and Tag
            value: status:0,tags:rpi
        explode: true
        in: query
        name: q
        required: false
        schema:
          pattern: (status|service_profile|tariff_profile|last_updated|created|name|tags|ip_address|imei)\:.+
          type: string
        style: form
      - description: |
          Sort properties in a comma separated list from the following fields:

          * `status`
          * `service_profile`
          * `tariff_profile`
          * `last_updated`
          * `created`
          * `name`
          * `tags`
          * `id`
          * `ip_address`
          * `imei`
        examples:
          nosorting:
            summary: No sort applied
            value: ""
          sortbyID:
            summary: sort ascending by status
            value: status
          statusandid:
            description: The minus operator sorts by status descending and then sorting
              is applied by id ascending
            summary: Sort by status and ID
            value: -status,id
        explode: true
        in: query
        name: sort
        required: false
        schema:
          pattern: (^-?(status|service_profile|tariff_profile|last_updated|created|name|tags|ip_address|imei)),?
          type: string
        style: form
      - description: Current page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Paging parameters defining the number of items per page
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - id: 1
                name: arduino01
                tags: arduino, meter, temp
                created: 2019-08-01T08:47:00.000Z
                last_updated: 2020-02-29T14:02:47.000Z
                status:
                  id: 1
                  description: Disabled
                service_profile:
                  id: 1
                  name: Smart Meter
                tariff_profile:
                  id: 3
                  name: Domestic only
                sim:
                  id: 788
                  iccid: 736826736473829800000
                  imsi: 901991234567890
                  msisdn: 88563748761
                imei: 864345678889321
                imei_lock: true
                ip_address: 10.203.23.75
                ip_address_space:
                  id: 2
              - id: 2
                name: arduino02
                tags: arduino, meter, temp
                created: 2019-08-19T16:47:00.000Z
                status:
                  id: 1
                  description: Disabled
                service_profile:
                  id: 1
                  name: Smart Meter
                tariff_profile:
                  id: 3
                  name: Domestic only
                sim:
                  id: 789
                  iccid: 736826736473829800000
                  imsi: 901991234567891
                  msisdn: 88563748762
                imei: 864345678897829
                imei_lock: false
                ip_address: 10.203.23.76
                ip_address_space:
                  id: 2
              schema:
                items:
                  $ref: '#/components/schemas/Endpoint'
                type: array
          description: Successfully returned a list of Endpoints.
          headers:
            Link:
              description: URLs for navigational links used to retrieve first, previous,
                next and last page in a dataset
              explode: false
              schema:
                type: string
              style: simple
            X-Count-Per-Page:
              description: The requested `per_page` parameter
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Current-Page:
              description: The current page number within the current data set
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Total-Count:
              description: The total element count in the current data set
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Total-Pages:
              description: The total page count in the current data set
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Filter:
              description: If filtering is applied using `?q=field:criteria` URL query
                parameters, the filter criteria is returned here
              explode: false
              schema:
                type: string
              style: simple
            X-Sort:
              description: If sorting is applied using `?sort=sort_criteria` URL query
                parameters, the sort criteria is returned here
              explode: false
              schema:
                type: string
              style: simple
      summary: List Endpoints
      tags:
      - Endpoint
      x-accepts: application/json
    post:
      description: |
        If a `sim` object is provided, the SIM with the contained ID will be assigned to the endpoint.
        The `activate` property defaults to `true` and can be omitted unless the SIM should not be activated with this API call.

        The following fields may be provided:
        * `name` (String required)
        * `service_profile` (Object required)
        * `tariff_profile` (Object required)
        * `status` (Object required) - `0` = __Enabled__, `1` = __Disabled__!
        * `tags` (String optional)
        * `imei` (String optional)
        * `imei_lock` (Boolean optional)
        * `sim` (Object optional)
          - `id` (number required) SIM ID to be assigned to this endpoint
          - `activate` (Boolean, optional, default:true)
        * `ip_address` (String optional)
        * `ip_address_space` (Object, optional if IP address is omitted, mandatory when IP address is set)
      operationId: CreateEndpoint
      requestBody:
        $ref: '#/components/requestBodies/Endpoint_1'
        content:
          application/json:
            examples:
              CreateBasicEndpoint:
                description: |
                  Creates an endpoint with only mandatory fields provided.
                  For a list of tariff profiles, see `/api/v1/tariff_profile`.
                  For a list of service profiles, see `/api/v1/service_profile`.
                summary: Create Endpoint
                value:
                  name: example-endpoint
                  status:
                    id: 0
                  service_profile:
                    id: 1234
                  tariff_profile:
                    id: 5678
              CreateEndpointWithOptions:
                description: |
                  Create an endpoint with a status of 0 (Enabled).
                  The *IMEI lock* feature is enabled for a device with the provided IMEI value.
                  Tags are used for improving search and grouping related devices.
                  A SIM ID is provided and the SIM with this ID will be assigned to the endpoint,
                  the default value for `activate` (`true`) within the SIM object is desired and so this property can be omitted.
                summary: Endpoint with optional fields
                value:
                  name: example-meter
                  tags: arduino, meter, EU
                  imei: "8664250350704510"
                  imei_lock: true
                  status:
                    id: 0
                  service_profile:
                    id: 1234
                  tariff_profile:
                    id: 5678
                  sim:
                    id: 123
            schema:
              properties:
                id:
                  format: int32
                  type: integer
                name:
                  type: string
                tags:
                  type: string
                status:
                  $ref: '#/components/schemas/EndpointStatus'
                service_profile:
                  $ref: '#/components/schemas/ServiceProfile'
                tariff_profile:
                  $ref: '#/components/schemas/TariffProfile'
                ip_address:
                  type: string
                ip_address_space:
                  $ref: '#/components/schemas/IpAddressSpace'
                sim:
                  $ref: '#/components/schemas/Sim'
                imei:
                  type: string
                imei_lock:
                  type: boolean
                created:
                  format: date-time
                  type: string
                last_updated:
                  format: date-time
                  type: string
              required:
              - name
              - service_profile
              - status
              - tariff_profile
              title: Endpoint
              type: object
        required: true
      responses:
        "201":
          description: Resource successfully created
          headers:
            Location:
              description: Relative location of the newly-created resource.
              explode: false
              schema:
                example: /api/v1/resource/123
                type: string
              style: simple
        "404":
          content:
            application/json:
              example:
                error_code: 1601
                error_token: Unavailable
                message: No IP Address available.
              schema:
                $ref: '#/components/schemas/_40x_Response'
          description: Unexpected error in API call. See HTTP response body for details.
        "409":
          content:
            application/json:
              example:
                error_code: 1405
                error_token: Duplicated
                message: IP Address - fd:0:0:0:0:0:0:1 already assigned.
              schema:
                $ref: '#/components/schemas/_40x_Response'
          description: Unexpected error in API call. See HTTP response body for details.
        "422":
          content:
            application/json:
              example:
                error_code: 1400
                error_token: InputValidationFailed
                message: InputValidationFailed
                errors:
                - error_code: 1404
                  error_token: OutOfRange
                  message: Endpoint - IP Address out of range.
              schema:
                $ref: '#/components/schemas/ChangePassword422response'
          description: Unprocessable Entity. See HTTP response body for details.
      summary: Create Endpoint
      tags:
      - Endpoint
      x-contentType: application/json
      x-accepts: application/json
  /api/v1/endpoint/{endpoint_id}/quota/data:
    delete:
      description: |
        Will delete the data quota for the endpoint, if any is set.
        Note that if `apply_data_quota` is still set in the service profile, the endpoint will get blocked from data service.
      operationId: DeleteEndpointDataQuotaById
      parameters:
      - description: The numeric ID of an Endpoint
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "204":
          description: Success
        "404":
          description: |
            Can be one of the following reasons:
            - No Data Quota configured
            - Endpoint not found
            - Endpoint not part of this organisation
      summary: Remove Data Quota
      tags:
      - Endpoint
      x-accepts: application/json
    get:
      description: |
        Returns details about the assigned Data Quota for an endpoint.
        * `status`: this indicates the current status of the quota and may contain the following values:
            - `ACTIVE`: the endpoint can currently connect and has quota left
            - `EXHAUSTED`: the endpoint has exceeded the quota volume, if it still can use data service depends on the action chosen to be performed on exhaustion
            - `EXPIRED`: the quota has expired; the endpoint is denied from using data services (until new quota is added)
        * `volume`: returns the volume left on this quota in MB
        * `expiry_date`: timestamp when this quota will expire and the endpoint will definitely be denied from using further data services (regardless if the quota volume was used up or not)
        * `peak_throughput`: The maximum bandwidth in octets per second after the endpoint has been throttled.
        * `action_on_exhaustion`: returns the behaviour defined to be applied when quota volume is used up (exhausted).
            - `Throttle`: bandwidth will be throttle to the defined peak throughput until quota expires
            - `Block`: data service will be instantly blocked once volume used up, regardless if the expiry date is already reached or not
        * `auto_refill`: 0 (false) / 1 (true), refill the quota with the last added volume on a daily basis
      operationId: EndpointQuotaDataByEndpointIdGet
      parameters:
      - description: The numeric ID of an Endpoint
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointQuota'
          description: Success
      summary: Retrieve Data Quota details
      tags:
      - Endpoint
      x-accepts: application/json
    post:
      description: |
        At any time, a new data quota can be set for an endpoint.
        At an initial state when no data quota is set, the endpoint will be denied from using data services.
        To top-up the data volume you need to retrieve the currently remaining volume, increase it by the top-up volume and set it as the new quota volume.

        The following parameters can be configured:
        * `status` - The status of the quota (mandatory):
          - 1: `ACTIVE`
          - 2: `EXHAUSTED`
          - 3: `EXPIRED`
        * `volume`: The volume left on this quota in MB
        * `expiry_date`: Timestamp when this quota will expire and the endpoint will definitely be denied from using further data services (mandatory)
        * `auto_refill`: Wether the quota shall be refilled on a daily basis (defaults to disabled):
          - 0: `disabled`
          - 1: `enabled`
        * `threshold_percentage`: The percentage of remaining quota at which the system should generate a `threshold reached` event
        * `action_on_exhaustion`: The behaviour of the system after the quota is exhausted:
          - id: ID of the action on quota exhaustion (mandatory)
            - 1: `Block`
            - 2: `Throttle`
          - peak_throughput: The maximum bandwidth in octets per second after the endpoint has been throttled. (mandatory)
          Allowed values are 64000, 128000, 256000, 384000. (will not take any effect on `action_on_exhaustion` "Block")

        #### Events
        The system generates a "Quota Used Up" Event in case the data quota is completely depleted.
        The endpoint will be blocked from further consumption of data.
        The quota object will be included in the details of the event. Example events can be found in the Events of an Endpoint section.

        #### Notes

        The endpoint can instantly use data services after the API call to this entrypoint is successfully made.
        Any timestamp with a future date can be set, this allows to create data packages (e.g. for 1 hour, 24 hour, 7 days or any other timeframe) as required.
      operationId: EndpointQuotaDataByEndpointIdPost
      parameters:
      - description: The numeric ID of an Endpoint
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/EndpointQuota_1'
        content:
          application/json:
            examples:
              DataQuotaPostRequest:
                description: |
                  A new quota with 100MB is created with an expiration of `2022-01-17 08:47:00 UTC`.
                  An action on exhaustion of the quota is configured to **Throttle** with a peak throughput of 128000 octets per second.
                  A threshold is set to `15%`.
                  If the remaining volume goes below this percentage of the applied quota, the system will generate a "threshold reached" event.
                summary: Create a 100MB Data Quota
                value:
                  status:
                    id: 1
                  volume: 100
                  auto_refill: 1
                  expiry_date: 2022-01-17T08:47:00.000Z
                  action_on_exhaustion:
                    id: 2
                    peak_throughput: 128000
                  threshold_percentage: 15
            schema:
              example:
                volume: 99.999228
                expiry_date: 2020-01-17T08:47:00.000Z
                peak_throughput: 128000
                last_volume_added: 100
                last_status_change_date: 2019-04-10T14:22:11.000Z
                auto_refill: 0
                threshold_percentage: 15
                threshold_volume: 15
                status:
                  description: ACTIVE
                  id: 1
                action_on_exhaustion:
                  action_on_quota_exhaustion_id: "2"
                  description: Throttle
                  id: 2
              properties:
                last_volume_added:
                  format: float
                  type: number
                last_status_change_date:
                  pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                  type: string
                auto_refill:
                  format: int32
                  type: integer
                threshold_volume:
                  format: float
                  type: number
                threshold_percentage:
                  format: float
                  type: number
                status:
                  $ref: '#/components/schemas/QuotaStatus'
                volume:
                  format: float
                  type: number
                expiry_date:
                  pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
                  type: string
                action_on_exhaustion:
                  $ref: '#/components/schemas/ActionOnExhaustion'
                peak_throughput:
                  format: int32
                  type: integer
              required:
              - action_on_exhaustion
              - expiry_date
              - status
              - volume
              title: EndpointQuota
              type: object
        required: true
      responses:
        "201":
          description: Resource Created
        "422":
          content:
            application/json:
              example:
                message: Invalid peak throughput, acceptable values are 64000, 128000
                  and 256000.
              schema:
                $ref: '#/components/schemas/ChangeQuota422Response'
          description: Unprocessable Entity.
      summary: Set Data Quota
      tags:
      - Endpoint
      x-contentType: application/json
      x-accepts: application/json
components:
  requestBodies:
    Endpoint_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Endpoint_1'
      required: true
    Authentication:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authentication'
      required: true
    EndpointQuota_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EndpointQuota_1'
      required: true
  schemas:
    ServiceProfile:
      example:
        name: name
        id: 1
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
      required:
      - id
      title: ServiceProfile
      type: object
    Endpoint_1:
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        tags:
          type: string
        status:
          $ref: '#/components/schemas/EndpointStatus'
        service_profile:
          $ref: '#/components/schemas/ServiceProfile'
        tariff_profile:
          $ref: '#/components/schemas/TariffProfile'
        ip_address:
          type: string
        ip_address_space:
          $ref: '#/components/schemas/IpAddressSpace'
        sim:
          $ref: '#/components/schemas/Sim'
        imei:
          type: string
        imei_lock:
          type: boolean
        created:
          format: date-time
          type: string
        last_updated:
          format: date-time
          type: string
      required:
      - name
      - service_profile
      - status
      - tariff_profile
      title: Endpoint
      type: object
    inline_response_404:
      example:
        error_code: 1401
        error_token: InvalidReference
        message: Organisation with Id '1234' not found.
      properties:
        error_code:
          format: int32
          type: integer
        error_token:
          type: string
        message:
          type: string
      type: object
    ChangePassword422response:
      example:
        error_code: 1002
        error_token: Failed
        message: Invalid old password
        errors:
        - error_code: 1400
          error_token: InputValidationFailed
          message: Wrong Password for User 'own_username'
      properties:
        error_code:
          format: int32
          type: integer
        error_token:
          type: string
        message:
          type: string
        errors:
          items:
            type: object
          type: array
      title: ChangePassword422response
      type: object
    ChangeQuota422Response:
      properties:
        message:
          type: string
      title: ChangeQuota422Response
      type: object
    IpAddressSpace:
      example:
        id: 5
      properties:
        id:
          format: int32
          type: integer
      required:
      - id
      title: IpAddressSpace
      type: object
    AuthenticationResponse:
      example:
        refresh_token: refresh_token
        auth_token: auth_token
      properties:
        auth_token:
          type: string
        refresh_token:
          type: string
      title: AuthenticationResponse
      type: object
    TariffProfile:
      example:
        name: name
        id: 5
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
      required:
      - id
      title: TariffProfile
      type: object
    EndpointStatus:
      example:
        description: description
        id: 6
      properties:
        id:
          format: int32
          type: integer
        description:
          type: string
      required:
      - id
      title: EndpointStatus
      type: object
    EndpointQuota:
      example:
        volume: 99.999228
        expiry_date: 2020-01-17T08:47:00.000Z
        peak_throughput: 128000
        last_volume_added: 100
        last_status_change_date: 2019-04-10T14:22:11.000Z
        auto_refill: 0
        threshold_percentage: 15
        threshold_volume: 15
        status:
          description: ACTIVE
          id: 1
        action_on_exhaustion:
          action_on_quota_exhaustion_id: "2"
          description: Throttle
          id: 2
      properties:
        last_volume_added:
          format: float
          type: number
        last_status_change_date:
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          type: string
        auto_refill:
          format: int32
          type: integer
        threshold_volume:
          format: float
          type: number
        threshold_percentage:
          format: float
          type: number
        status:
          $ref: '#/components/schemas/QuotaStatus'
        volume:
          format: float
          type: number
        expiry_date:
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          type: string
        action_on_exhaustion:
          $ref: '#/components/schemas/ActionOnExhaustion'
        peak_throughput:
          format: int32
          type: integer
      required:
      - action_on_exhaustion
      - expiry_date
      - status
      - volume
      title: EndpointQuota
      type: object
    Endpoint:
      example:
        service_profile:
          name: name
          id: 1
        last_updated: 2000-01-23T04:56:07.000+00:00
        imei_lock: true
        created: 2000-01-23T04:56:07.000+00:00
        ip_address: ip_address
        ip_address_space:
          id: 5
        tags: tags
        sim:
          iccid: iccid
          id: 2
          imsi: imsi
          msisdn: msisdn
        name: name
        imei: imei
        id: 0
        tariff_profile:
          name: name
          id: 5
        status:
          description: description
          id: 6
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        tags:
          type: string
        status:
          $ref: '#/components/schemas/EndpointStatus'
        service_profile:
          $ref: '#/components/schemas/ServiceProfile'
        tariff_profile:
          $ref: '#/components/schemas/TariffProfile'
        ip_address:
          type: string
        ip_address_space:
          $ref: '#/components/schemas/IpAddressSpace'
        sim:
          $ref: '#/components/schemas/Sim'
        imei:
          type: string
        imei_lock:
          type: boolean
        created:
          format: date-time
          type: string
        last_updated:
          format: date-time
          type: string
      required:
      - name
      - service_profile
      - status
      - tariff_profile
      title: Endpoint
      type: object
    Authentication:
      example:
        refresh_token: refresh_token
        password: password
        application_token: application_token
        username: username
      properties:
        application_token:
          type: string
        username:
          type: string
        password:
          format: password
          type: string
        refresh_token:
          format: string
          type: string
      title: Authentication
      type: object
    Sim:
      example:
        iccid: iccid
        id: 2
        imsi: imsi
        msisdn: msisdn
      properties:
        id:
          format: int32
          type: integer
        iccid:
          type: string
        msisdn:
          type: string
        imsi:
          type: string
      required:
      - id
      title: Sim
      type: object
    EndpointQuota_1:
      example:
        volume: 99.999228
        expiry_date: 2020-01-17T08:47:00.000Z
        peak_throughput: 128000
        last_volume_added: 100
        last_status_change_date: 2019-04-10T14:22:11.000Z
        auto_refill: 0
        threshold_percentage: 15
        threshold_volume: 15
        status:
          description: ACTIVE
          id: 1
        action_on_exhaustion:
          action_on_quota_exhaustion_id: "2"
          description: Throttle
          id: 2
      properties:
        last_volume_added:
          format: float
          type: number
        last_status_change_date:
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          type: string
        auto_refill:
          format: int32
          type: integer
        threshold_volume:
          format: float
          type: number
        threshold_percentage:
          format: float
          type: number
        status:
          $ref: '#/components/schemas/QuotaStatus'
        volume:
          format: float
          type: number
        expiry_date:
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          type: string
        action_on_exhaustion:
          $ref: '#/components/schemas/ActionOnExhaustion'
        peak_throughput:
          format: int32
          type: integer
      required:
      - action_on_exhaustion
      - expiry_date
      - status
      - volume
      title: EndpointQuota
      type: object
    _40x_Response:
      properties:
        error_code:
          format: int32
          type: integer
        error_token:
          type: string
        message:
          type: string
      title: 40x Response
      type: object
    QuotaStatus:
      properties:
        description:
          enum:
          - EXHAUSTED
          - ACTIVE
          - EXPIRED
          type: string
        id:
          enum:
          - 1
          - 2
          - 3
          format: int32
          type: integer
      required:
      - id
      title: QuotaStatus
      type: object
    ActionOnExhaustion:
      properties:
        id:
          enum:
          - 1
          - 2
          format: int32
          type: integer
        description:
          enum:
          - Throttle
          - Block
          type: string
        peak_throughput:
          format: int32
          type: integer
      required:
      - id
      title: ActionOnExhaustion
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: |
        An `auth_token` should be provided to authenticate a session.

        To obtain an `auth_token`, see the `POST` request to
        `/api/v1/authenticate`.
      scheme: bearer
      type: http

